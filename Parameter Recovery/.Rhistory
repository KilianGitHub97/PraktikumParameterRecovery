names(oldpar) <- names(newpar)
#Datensatz mit neuen und alten Parametern
par <- rbind(newpar, oldpar)
#for loop, der jedes Element der Liste cutnewpar von long zu wide transformiert
cutpar <- list()
for (i in 1:7) {
unlist(cutnewpar[[i]])
cutnewpar[[i]] <- cutnewpar[[i]] %>% spread(key = .rownames, value = Estimate)
cutpar[[i]] <- rbind(cutnewpar[[i]], oldpar)
}
cutnewpar <- list()
l <- 1
#For-loop der bei jedem Datensatz jeweils die erste (bis siebte) Zeile löscht und die Parameter in der List cutnewpar speichert
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %dopar% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie_1, choicerule = "none"))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)
}
l = l + 1
}
#for loop, der jedes Element der Liste cutnewpar von long zu wide transformiert
cutpar <- list()
for (i in 1:7) {
unlist(cutnewpar[[i]])
cutnewpar[[i]] <- cutnewpar[[i]] %>% spread(key = .rownames, value = Estimate)
cutpar[[i]] <- rbind(cutnewpar[[i]], oldpar)
}
#for loop, der jedes Element der Liste cutnewpar von long zu wide transformiert
cutpar <- list()
for (i in 1:7) {
unlist(cutnewpar[[i]])
cutnewpar[[i]] <- cutnewpar[[i]] %>% spread(key = .rownames, value = Estimate)
unlist(cutnewpar[[i]])
cutpar[[i]] <- rbind(cutnewpar[[i]], oldpar)
}
cutnewpar <- list()
l <- 1
#For-loop der bei jedem Datensatz jeweils die erste (bis siebte) Zeile löscht und die Parameter in der List cutnewpar speichert
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %dopar% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie_1, choicerule = "none"))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)
}
l = l + 1
}
#for loop, der jedes Element der Liste cutnewpar von long zu wide transformiert
cutpar <- list()
for (i in 1:7) {
unlist(cutnewpar[[i]])
cutnewpar[[i]] <- cutnewpar[[i]] %>% spread(key = .rownames, value = Estimate)
unlist(cutnewpar[[i]])
cutpar[[i]] <- rbind(cutnewpar[[i]], oldpar)
}
view(cutnewpar[[2]])
cutnewpar <- list()
l <- 1
#For-loop der bei jedem Datensatz jeweils die erste (bis siebte) Zeile löscht und die Parameter in der List cutnewpar speichert
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %dopar% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie_1, choicerule = "none"))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)
}
l = l + 1
}
#for loop, der jedes Element der Liste cutnewpar von long zu wide transformiert
cutpar <- list()
for (i in 1:7) {
unlist(cutnewpar[[i]])
cutnewpar[[i]] <- cutnewpar[[i]] %>% spread(key = .rownames, value = Estimate)
cutpar[[i]] <- left_join(cutnewpar[[i]], oldpar, by = "ID")
}
for (i in 1:7) {
unlist(cutnewpar[[i]])
cutnewpar[[i]] <- cutnewpar[[i]] %>% spread(key = .rownames, value = Estimate)
cutpar[[i]] <- full_join(cutnewpar[[i]], oldpar, by = "ID")
}
cutnewpar <- list()
l <- 1
#For-loop der bei jedem Datensatz jeweils die erste (bis siebte) Zeile löscht und die Parameter in der List cutnewpar speichert
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %dopar% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie_1, choicerule = "none"))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)
}
l = l + 1
}
#for loop, der jedes Element der Liste cutnewpar von long zu wide transformiert
cutpar <- list()
for (i in 1:7) {
unlist(cutnewpar[[i]])
cutnewpar[[i]] <- cutnewpar[[i]] %>% spread(key = .rownames, value = Estimate)
cutpar[[i]] <- full_join(cutnewpar[[i]], oldpar, by = "ID")
}
cutnewpar <- list()
l <- 1
#For-loop der bei jedem Datensatz jeweils die erste (bis siebte) Zeile löscht und die Parameter in der List cutnewpar speichert
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %dopar% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie_1, choicerule = "none"))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)
}
l = l + 1
}
#for loop, der jedes Element der Liste cutnewpar von long zu wide transformiert
cutpar <- list()
for (i in 1:7) {
unlist(cutnewpar[[i]])
cutnewpar[[i]] <- cutnewpar[[i]] %>% spread(key = .rownames, value = Estimate)
cutpar[[i]] <- full_join(cutnewpar[[i]], oldpar, by = "b0")
}
cutnewpar <- list()
l <- 1
#For-loop der bei jedem Datensatz jeweils die erste (bis siebte) Zeile löscht und die Parameter in der List cutnewpar speichert
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %dopar% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie_1, choicerule = "none"))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)
}
l = l + 1
}
#for loop, der jedes Element der Liste cutnewpar von long zu wide transformiert
cutpar <- list()
for (i in 1:7) {
unlist(cutnewpar[[i]])
cutnewpar[[i]] <- cutnewpar[[i]] %>% spread(key = .rownames, value = Estimate)
unlist(cutnewpar[[i]])
cutpar[[i]] <- full_join(cutnewpar[[i]], oldpar, by = "b0")
}
cutnewpar <- list()
l <- 1
#For-loop der bei jedem Datensatz jeweils die erste (bis siebte) Zeile löscht und die Parameter in der List cutnewpar speichert
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %dopar% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie_1, choicerule = "none"))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)
}
l = l + 1
}
#for loop, der jedes Element der Liste cutnewpar von long zu wide transformiert
cutpar <- list()
for (i in 1:7) {
unlist(cutnewpar[[i]])
cutnewpar[[i]] <- cutnewpar[[i]] %>% spread(key = .rownames, value = Estimate)
cutpar[[i]] <- left_join(cutnewpar[[i]], oldpar, by = "b0")
}
view(cutnewpar[[2]])
cutnewpar <- list()
l <- 1
#For-loop der bei jedem Datensatz jeweils die erste (bis siebte) Zeile löscht und die Parameter in der List cutnewpar speichert
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %dopar% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie_1, choicerule = "none"))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)
}
l = l + 1
}
#for loop, der jedes Element der Liste cutnewpar von long zu wide transformiert
cutpar <- list()
names <- c("ID", "b0", "b1", "(color)", "(lambda)", "(q)", "(r)", "(shape)", "(size)")
for (i in 1:7) {
unlist(cutnewpar[[i]])
cutnewpar[[i]] <- cutnewpar[[i]] %>% spread(key = .rownames, value = Estimate)
cutnewpar[[i]] <- cutnewpar[[i]][,names]
cutpar[[i]] <- rbind(cutnewpar[[i]], oldpar)
}
cutnewpar <- list()
l <- 1
#For-loop der bei jedem Datensatz jeweils die erste (bis siebte) Zeile löscht und die Parameter in der List cutnewpar speichert
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %dopar% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie_1, choicerule = "none"))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)
}
l = l + 1
}
#for loop, der jedes Element der Liste cutnewpar von long zu wide transformiert
cutpar <- list()
names <- c("ID", "b0", "b1", "(color)", "(lambda)", "(q)", "(r)", "(shape)", "(size)")
for (i in 1:7) {
unlist(cutnewpar[[i]])
cutnewpar[[i]] <- cutnewpar[[i]] %>% spread(key = .rownames, value = Estimate)
cutnewpar[[i]] <- cutnewpar[[i]][,..names]
cutpar[[i]] <- rbind(cutnewpar[[i]], oldpar)
}
cutnewpar <- list()
l <- 1
#For-loop der bei jedem Datensatz jeweils die erste (bis siebte) Zeile löscht und die Parameter in der List cutnewpar speichert
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %dopar% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie_1, choicerule = "none"))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)
}
l = l + 1
}
#for loop, der jedes Element der Liste cutnewpar von long zu wide transformiert
cutpar <- list()
for (i in 1:7) {
unlist(cutnewpar[[i]])
cutnewpar[[i]] <- cutnewpar[[i]] %>% spread(key = .rownames, value = Estimate)
names <- c("ID", "b0", "b1", "(color)", "(lambda)", "(q)", "(r)", "(shape)", "(size)")
cutnewpar[[i]] <- cutnewpar[[i]][,..names]
cutpar[[i]] <- rbind(cutnewpar[[i]], oldpar)
}
cutnewpar <- list()
l <- 1
#For-loop der bei jedem Datensatz jeweils die erste (bis siebte) Zeile löscht und die Parameter in der List cutnewpar speichert
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %dopar% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie_1, choicerule = "none"))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)
}
l = l + 1
}
#for loop, der jedes Element der Liste cutnewpar von long zu wide transformiert
cutpar <- list()
for (i in 1:7) {
unlist(cutnewpar[[i]])
cutnewpar[[i]] <- cutnewpar[[i]] %>% spread(key = .rownames, value = Estimate)
names <- c("ID", "b0", "b1", "color", "lambda", "q", "r", "shape", "size")
cutnewpar[[i]] <- cutnewpar[[i]][,..names]
cutpar[[i]] <- rbind(cutnewpar[[i]], oldpar)
}
cutnewpar <- list()
l <- 1
#For-loop der bei jedem Datensatz jeweils die erste (bis siebte) Zeile löscht und die Parameter in der List cutnewpar speichert
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %dopar% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie_1, choicerule = "none"))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)
}
l = l + 1
}
#for loop, der jedes Element der Liste cutnewpar von long zu wide transformiert
cutpar <- list()
for (i in 1:7) {
unlist(cutnewpar[[i]])
cutnewpar[[i]] <- cutnewpar[[i]] %>% spread(key = .rownames, value = Estimate)
names <- c("ID", "b0", "b1", "color", "lambda", "q", "r", "shape", "size")
cutnewpar[[i]] <- cutnewpar[[i]][,names]
cutpar[[i]] <- rbind(cutnewpar[[i]], oldpar)
}
view(cutpar[[2]])
View(par2)
cutnewpar <- list()
l <- 1
#For-loop der bei jedem Datensatz jeweils die erste (bis siebte) Zeile löscht und die Parameter in der List cutnewpar speichert
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %dopar% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie_1, choicerule = "none"))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)
}
l = l + 1
}
#for loop, der jedes Element der Liste cutnewpar von long zu wide transformiert und die gefixten Parameter anheftet
cutpar <- list()
names <- c("ID", "b0", "b1", "color", "lambda", "q", "r", "shape", "size")
for (i in 1:7) {
unlist(cutnewpar[[i]])
cutnewpar[[i]] <- cutnewpar[[i]] %>% spread(key = .rownames, value = Estimate)
cutnewpar[[i]] <- cutnewpar[[i]][,names]
cutpar[[i]] <- rbind(cutnewpar[[i]], oldpar)
}
# Die Nummer in der eckigen Klammer ist gleich der Anzahl der a
view(cutpar[[2]])
cutparblo <- list()
for (i in 1:7) {
cutparblo[[i]] <- cutpar[[i]] %>% mutate(number_of_blocks = i)
}
cutparblo[1]
allcutpar <- rbind(cutparblo[[1]],
cutparblo[[2]],
cutparblo[[3]],
cutparblo[[4]],
cutparblo[[5]],
cutparblo[[6]],
cutparblo[[7]])
allcutpar
View(allcutpar)
allcutpar %>%
filter(ID == original)
allcutpar %>%
filter(ID == "original")
allcutpar %>%
filter(ID != "original")
allcutpar <- allcutpar %>%
filter(ID != "original")
View(allcutpar)
View(allcutpar)
ggplot(data = allcutpar,
ggplot(data = allcutpar,
aes(x = b0,
y = number_of_blocks) +
geom_line() +
theme_classic()
)
)))
ggplot(data = allcutpar,
aes(x = b0,
y = number_of_blocks)) +
geom_line() +
theme_classic()
ggplot(data = allcutpar,
aes(y = number_of_blocks)) +
geom_line() +
theme_classic()
ggplot(data = allcutpar,
aes(x = b0
)) +
geom_line() +
theme_classic()
ggplot(data = allcutpar,
aes(x = b0,
y = number_of_blocks)) +
geom_line() +
theme_classic()
unlist(allcutpar)
allcutpar <- as.data.frame(allcutpar)
ggplot(data = allcutpar,
aes(x = b0,
y = number_of_blocks)) +
geom_line() +
theme_classic()
View(allcutpar)
allcutpar$b0 <- as.data.frame(allcutpar$b0)
as.data.frame(allcutpar)
ggplot(data = allcutpar,
aes(x = b0,
y = number_of_blocks)) +
geom_line() +
theme_classic()
ggplot(data = as.data.frame(allcutpar),
aes(x = b0,
y = number_of_blocks)) +
geom_line() +
theme_classic()
View(allcutpar)
as.data.frame(unlist(allcutpar))
view(as.data.frame(unlist(allcutpar)))
class(allcutpar)
class(allcutpar$b0)
as.data.frame(allcutpar$b0)
data.frame(allcutpar$b0)
class(data_raw_shepard$size)
class(data_raw_shepard$Kategorie_1)
allcutpar$b0 <- as.numeric(allcutpar$b0)
allcutpar$b0 <- unlist(allcutpar$b0)
View(allcutpar)
allcutpar <- as.data.frame(
rbind(cutparblo[[1]],
cutparblo[[2]],
cutparblo[[3]],
cutparblo[[4]],
cutparblo[[5]],
cutparblo[[6]],
cutparblo[[7]]))
allcutpar$b0 <- unlist(allcutpar$b0)
is.null(allcutpar$b0)
get.null(allcutpar$b0)
get(is.null(allcutpar$b0))
allcutpar$b0[lengths(allcutpar$b0) == 0]
allcutpar$b0[lengths(allcutpar$b0) == 0] <- NA
View(allcutpar)
allcutpar$b0 <- unlist(allcutpar$b0)
allcutpar$b1[lengths(allcutpar$b1) == 0] <- NA
allcutpar$color[lengths(allcutpar$color) == 0] <- NA
allcutpar$b1[lengths(allcutpar$b1) == 0] <- NA
allcutpar$lambda[lengths(allcutpar$lambda) == 0] <- NA
allcutpar$b0[lengths(allcutpar$b0) == 0] <- NA
allcutpar$b1[lengths(allcutpar$b1) == 0] <- NA
allcutpar$color[lengths(allcutpar$color) == 0] <- NA
allcutpar$lambda[lengths(allcutpar$lambda) == 0] <- NA
allcutpar$q[lengths(allcutpar$q) == 0] <- NA
allcutpar$r[lengths(allcutpar$r) == 0] <- NA
allcutpar$shape[lengths(allcutpar$shape) == 0] <- NA
allcutpar$size[lengths(allcutpar$size) == 0] <- NA
View(allcutpar)
allcutpar$b0 <- unlist(allcutpar$b0)
allcutpar$b1 <- unlist(allcutpar$b1)
allcutpar$color <- unlist(allcutpar$color)
allcutpar$lambda <- unlist(allcutpar$lambda)
allcutpar$q <- unlist(allcutpar$q)
allcutpar$r <- unlist(allcutpar$r)
allcutpar$shape <- unlist(allcutpar$shape)
allcutpar$size <- unlist(allcutpar$size)
allcutpar <- allcutpar %>%
filter(ID != "original")
class(allcutpar$b0)
ggplot(data = as.data.frame(allcutpar),
aes(x = b0,
y = number_of_blocks)) +
geom_line() +
theme_classic()
oldpar
View(oldpar)
ggplot(data = as.data.frame(allcutpar),
aes(y = number_of_blocks)) +
geom_line(x = b0) +
geom_line(x = 0.5, color = "red")+
theme_classic()
ggplot(data = as.data.frame(allcutpar),
aes(y = b0)) +
geom_line(x = number_of_blocks) +
geom_line(x = 0.5, color = "red")+
theme_classic()
ggplot(data = allcutpar,
aes(y = b0)) +
geom_line(x = number_of_blocks) +
geom_line(x = 0.5, color = "red")+
theme_classic()
ggplot(data = allcutpar,
aes(y = b0)) +
geom_line(x = number_of_blocks) +
# geom_line(x = 0.5, color = "red")+
theme_classic()
ggplot(data = allcutpar,
aes(y = b0)) +
geom_line(x = number_of_blocks) +
# geom_line(x = 0.5, color = "red")+
theme_classic()
geom_line(aes(x = number_of_blocks) +
))
ggplot(data = allcutpar,
ggplot(data = allcutpar,
aes(y = b0)) +
geom_line(aes(x = number_of_blocks)) +
geom_line(aes(x = 0.5, color = "red"))+
theme_classic()
))
ggplot(data = allcutpar,
aes(y = b0)) +
geom_line(aes(x = number_of_blocks)) +
geom_line(aes(x = 0.5, color = "red"))+
theme_classic()
ggplot(data = allcutpar,
aes(x = b0)) +
geom_line(aes(y = number_of_blocks)) +
geom_line(aes(y = 0.5, color = "red"))+
theme_classic()
ggplot(data = allcutpar,
aes(x = b0)) +
geom_line(aes(y = number_of_blocks)) +
geom_line(aes(x = 0.5, color = "red"))+
theme_classic()
ggplot(data = allcutpar,
aes(y = number_of_blocks)) +
geom_line(aes(x = b0)) +
geom_line(aes(x = 0.5, color = "red"))+
theme_classic()
ggplot(data = allcutpar,
aes(y = ID)) +
geom_line(aes(x = b0)) +
geom_line(aes(x = 0.5, color = "red"))+
theme_classic()
ggplot(data = allcutpar,
aes(y = number_of_blocks)) +
geom_line(aes(x = b0)) +
geom_line(aes(x = 0.5, color = "red"))+
theme_classic()
library(ggplotly)
library(plotly)
plotly(
ggplot(data = allcutpar,
aes(y = number_of_blocks)) +
geom_line(aes(x = b0)) +
geom_line(aes(x = 0.5, color = "red"))+
theme_classic())
plotly(
ggplot(data = allcutpar,
aes(y = number_of_blocks)) +
geom_line(aes(x = b0)) +
geom_line(aes(x = 0.5, color = "red"))+
theme_classic())
ggplotly(
ggplot(data = allcutpar,
aes(y = number_of_blocks)) +
geom_line(aes(x = b0)) +
geom_line(aes(x = 0.5, color = "red"))+
theme_classic())
ggplotly(
ggplot(data = allcutpar,
aes(y = ID)) +
geom_line(aes(x = b0)) +
geom_line(aes(x = 0.5, color = "red"))+
theme_classic()
)
ggplot(data = allcutpar,
aes(y = number_of_blocks)) +
geom_line(aes(x = b0)) +
geom_line(aes(x = 0.5, color = "red"))+
facet_wrap(~ID)+
theme_classic()
ggplotly(
ggplot(data = allcutpar,
aes(y = number_of_blocks)) +
geom_line(aes(x = b0)) +
geom_line(aes(x = 0.5, color = "red"))+
facet_wrap(~ID)+
theme_classic()
)
