#results <- fread("D:\\Bibliotheken\\Dokumente\\R\\PraktikumParameterRecovery\\Parameter Recovery\\Data\\DiscountTauCat2.csv")
results <- fread("D:\\Bibliotheken\\Dokumente\\R\\PraktikumParameterRecovery\\Parameter Recovery\\Data\\BlockTau.csv")
#spread data.table by par and true_par
results_wide <- dcast(results, run + discount + nblock + type + row + convergence ~ names, value.var = c("par", "true_par"))
#calculate Means from the different runs
results_mean <-
foreach (discount_m = discounts, .combine = "rbind", .packages = "data.table") %:%
foreach (nblock_m = nblocks, .combine = "rbind") %:%
foreach (type_m = types, .combine = "rbind") %:%
foreach (true_par_m = 1:nrow(true_pars), .combine = "rbind") %dopar%
{
{
{
{
data.table(
discount = discount_m,
nblock = nblock_m,
type = type_m,
row = true_par_m,
#filter all possible combinations of the parameters and calculate the mean & median
results_wide[discount == discount_m &
nblock == nblock_m &
type == type_m &
row == true_par_m,
list(Mean_b0 = mean(par_b0),
Mean_b1 = mean(par_b1),
Mean_color = mean(par_color),
Mean_lambda = mean(par_lambda),
Mean_q = mean(par_q),
Mean_r = mean(par_r),
Mean_shape = mean(par_shape),
Mean_size = mean(par_size),
Mean_tau = mean(par_tau),
Median_b0 = median(par_b0),
Median_b1 = median(par_b1),
Median_color = median(par_color),
Median_lambda = median(par_lambda),
Median_q = median(par_q),
Median_r = median(par_r),
Median_shape = median(par_shape),
Median_size = median(par_size),
Median_tau = median(par_tau),
true_b0 = true_par_b0,
true_b1 = true_par_b1,
true_color = true_par_color,
true_lambda = true_par_lambda,
true_q = true_par_q,
true_r = true_par_r,
true_shape = true_par_shape,
true_size = true_par_size,
true_tau = true_par_tau)]
)
}
}
}
}
View(results_mean)
#gather the mean & median results back to its original form
results_mean_long <-
unique(
melt(results_mean, id.vars = c("discount",
"nblock",
"type",
"row"),
measure.vars = list( c("Mean_b0",
"Mean_b1",
"Mean_color",
"Mean_lambda",
"Mean_q",
"Mean_r",
"Mean_shape",
"Mean_size",
"Mean_tau"),
c("Median_b0",
"Median_b1",
"Median_color",
"Median_lambda",
"Median_q",
"Median_r",
"Median_shape",
"Median_size",
"Median_tau"),
c("true_b0",
"true_b1",
"true_color",
"true_lambda",
"true_q",
"true_r",
"true_shape",
"true_size",
"true_tau")),
variable.name = "names",
value.name = c( "Mean_par",
"Median_par",
"true_par")
)
)
#recoding the names column
results_mean_long[, "names" := sapply(names, function(x) {if(x==1) "b0"
else if (x==2) "b1"
else if (x==3) "color"
else if (x==4) "lambda"
else if (x==5) "q"
else if (x==6) "r"
else if (x==7) "shape"
else if (x==8) "size"
else if (x==9) "tau"
})]
+ theme_minimal()
ggplot(data = results_wide,
mapping = aes(x = as.factor(nblock),
y = par_tau))
+ facet_wrap(~nblock)
ggplot(data = results_wide,
mapping = aes(x = as.factor(nblock),
y = par_tau))
ggplot(data = results_wide,
mapping = aes(x = as.factor(nblock),
y = par_tau)) +
+ geom_violin()
ggplot(data = results_wide,
mapping = aes(x = as.factor(nblock),
y = par_tau)) +
geom_violin() +
stat_summary(fun = "median", geom = "point")+
facet_wrap(~nblock)+
theme_minimal()
ggplot(data = results_wide,
mapping = aes(x = as.factor(nblock),
y = par_tau)) +
geom_violin() +
stat_summary(fun = "median", geom = "point")+
facet_wrap(~par_tau)+
theme_minimal()
ggplot(data = results_wide,
mapping = aes(x = as.factor(nblock),
y = par_tau)) +
geom_violin() +
stat_summary(fun = "median", geom = "point")+
facet_wrap(~par_tau)+
theme_minimal()
View(results_wide)
ggplot(data = results_wide,
mapping = aes(x = as.factor(nblock),
y = par_tau)) +
geom_violin() +
stat_summary(fun = "median", geom = "point")+
facet_wrap(~par_tau) +
theme_minimal()
ggplot(data = results_wide,
mapping = aes(x = as.factor(nblock),
y = par_tau)) +
geom_violin() +
stat_summary(fun = "median", geom = "point")+
#facet_wrap(~par_tau) +
theme_minimal()
View(results_wide)
ggplot(data = results_wide,
mapping = aes(x = as.factor(nblock),
y = par_tau)) +
geom_violin() +
stat_summary(fun = "median", geom = "point")+
facet_wrap(~true_par_tau) +
theme_minimal()
ggplot(data = results_wide,
mapping = aes(x = as.factor(nblock),
y = par_tau)) +
geom_violin() +
stat_summary(fun = "median", geom = "point")+
geom_line(aes(y = true_par_line), color = "red")
ggplot(data = results_wide,
mapping = aes(x = as.factor(nblock),
y = par_tau)) +
geom_violin() +
stat_summary(fun = "median", geom = "point")+
geom_line(aes(y = true_par_line), color = "red")+
facet_wrap(~true_par_tau) +
theme_minimal()
ggplot(data = results_wide,
mapping = aes(x = as.factor(nblock),
y = par_tau)) +
geom_violin() +
stat_summary(fun = "median", geom = "point")+
geom_line(aes(y = true_par_tau), color = "red")+
facet_wrap(~true_par_tau) +
theme_minimal()
ggplot(data = results_wide,
mapping = aes(x = as.factor(nblock),
y = par_tau)) +
geom_violin() +
stat_summary(fun = "median", geom = "point")+
geom_line(aes(x = nblock + 1, y = true_par_tau), color = "red")+
facet_wrap(~true_par_tau) +
theme_minimal()
ggplot(data = results_wide,
mapping = aes(x = as.factor(nblock),
y = par_tau)) +
geom_violin() +
stat_summary(fun = "median", geom = "point")+
geom_line(aes(x = nblock, y = true_par_tau), color = "red")+
facet_wrap(~true_par_tau) +
theme_minimal()
ggplot(data = results_wide,
mapping = aes(x = as.factor(nblock),
y = par_tau)) +
geom_violin() +
stat_summary(fun = "median", geom = "point")+
geom_line(aes(x = nblock, y = true_par_tau), color = "red")+
facet_wrap(~true_par_tau) +
xlab("Number of repetitive Blocks seen during learning phase") +
xlab("Estimated Tau") +
theme_minimal()
ggplot(data = results_wide,
mapping = aes(x = as.factor(nblock),
y = par_tau)) +
geom_violin() +
stat_summary(fun = "median", geom = "point")+
geom_line(aes(x = nblock, y = true_par_tau), color = "red")+
facet_wrap(~true_par_tau) +
xlab("Number of repetitive Blocks seen during learning phase") +
ylab("Estimated Tau") +
theme_minimal()
# true_tau ~ estimated tau (depending on nblocks)
ggplot(data = results_wide,
mapping = aes(x = true_par_tau,
y = par_tau)) +
stat_summary(fun = "median", geom = "point")+
geom_line( aes(x = true_par_tau, y = par_tau), color = "red") +
facet_wrap(~nblock) +
ylim(0,10) +
xlab("True tau") +
ylab("Median of estimated tau") +
theme_apa()
# true_tau ~ estimated tau (depending on nblocks)
ggplot(data = results_wide,
mapping = aes(x = true_par_tau,
y = par_tau)) +
stat_summary(fun = "median", geom = "point")+
geom_line( aes(x = true_par_tau, y = true_par_tau), color = "red") +
facet_wrap(~nblock) +
ylim(0,10) +
xlab("True tau") +
ylab("Median of estimated tau") +
theme_apa()
# estimated tau ~ nblock
ggplot(data = results_wide,
mapping = aes(x = as.factor(nblock),
y = par_tau)) +
geom_violin() +
stat_summary(fun = "median", geom = "point")+
geom_line(aes(x = nblock, y = true_par_tau), color = "red")+
facet_wrap(~true_par_tau) +
xlab("Number of repetitive Blocks seen during learning phase") +
ylab("Estimated Tau") +
theme_minimal()
# estimated tau ~ nblock
ggplot(data = results_wide,
mapping = aes(x = as.factor(nblock),
y = par_tau)) +
geom_violin() +
stat_summary(fun = "median", geom = "point")+
geom_line(aes(x = nblock, y = true_par_tau), color = "red")+
facet_wrap(~true_par_tau) +
xlab("Number of repetitive Blocks seen during learning phase") +
ylab("Estimated Tau") +
theme_minimal()
# Setup -------------------------------------------------------------------
discounts <- 8
nblocks <- 1:6
types <- 1
true_pars <- expand.grid(lambda = 1,
size = 0.333,
shape = 0.333,
r = 1,
q = 1,
b0 = 0.5,
tau = c(0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5, 1.7, 2))
runs <- 1:50
# Parameter Recovery
results <-
foreach(discount = discounts, .combine = "rbind", .packages = c("cognitivemodels", "data.table")) %:%
foreach (nblock = nblocks, .combine = "rbind"  ) %:%
foreach (type = types, .combine = "rbind"  ) %:%
foreach (row = 1:nrow(true_pars), .combine = "rbind") %:%
foreach(run = runs, .combine = "rbind") %dopar%
{
{
{
{
# make true_par a single row of the expand.grid()
true_par <- true_pars[row, ]
# replicate all rows of data_shep by the number of nblock
data <- data_shep[rep(1:nrow(data_shep), nblock),]
# GCM with fixed parameters
model <- gcm(data = data,
formula = ~ size + shape + color,
class = paste("cat", type, sep = "_"),
choicerule = "softmax",
fix = true_par,
discount = 0)
# Simulation of repeated measurements
predictions <- predict(model)
{
# Add the predicted binominal value ({0,1}) to the data
data$simulations <- rbinom(length(predictions) , 1, predictions)
# Estimate the parameters given the response (simulations) and the class (cat_)
fitted_model <- gcm(data = data,
formula = simulations ~ size + shape + color,
class = paste("cat", type, sep = "_"),
choicerule = "softmax",
discount = discount)
# Save the necessary components to the results
data.table(
run = run,
discount = discount,
nblock = nblock,
type = type,
row = row,
names = names(coef(fitted_model)),
par = coef(fitted_model),
true_par = model$get_par("all"),
convergence = fitted_model$fitobj$convergence
)
}
}
}
}
}
View(results)
write.csv(results,"D:\\Bibliotheken\\Dokumente\\R\\PraktikumParameterRecovery\\Parameter Recovery\\Data\\BlockTau.csv", row.names = FALSE)
# Setup -------------------------------------------------------------------
discounts <- 8
nblocks <- 6
types <- 1:6
true_pars <- expand.grid(lambda = 1,
size = 0.333,
shape = 0.333,
r = 1,
q = 1,
b0 = 0.5,
tau = c(0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5, 1.7, 2))
runs <- 1:50
# Parameter Recovery
results <-
foreach(discount = discounts, .combine = "rbind", .packages = c("cognitivemodels", "data.table")) %:%
foreach (nblock = nblocks, .combine = "rbind"  ) %:%
foreach (type = types, .combine = "rbind"  ) %:%
foreach (row = 1:nrow(true_pars), .combine = "rbind") %:%
foreach(run = runs, .combine = "rbind") %dopar%
{
{
{
{
# make true_par a single row of the expand.grid()
true_par <- true_pars[row, ]
# replicate all rows of data_shep by the number of nblock
data <- data_shep[rep(1:nrow(data_shep), nblock),]
# GCM with fixed parameters
model <- gcm(data = data,
formula = ~ size + shape + color,
class = paste("cat", type, sep = "_"),
choicerule = "softmax",
fix = true_par,
discount = 0)
# Simulation of repeated measurements
predictions <- predict(model)
{
# Add the predicted binominal value ({0,1}) to the data
data$simulations <- rbinom(length(predictions) , 1, predictions)
# Estimate the parameters given the response (simulations) and the class (cat_)
fitted_model <- gcm(data = data,
formula = simulations ~ size + shape + color,
class = paste("cat", type, sep = "_"),
choicerule = "softmax",
discount = discount)
# Save the necessary components to the results
data.table(
run = run,
discount = discount,
nblock = nblock,
type = type,
row = row,
names = names(coef(fitted_model)),
par = coef(fitted_model),
true_par = model$get_par("all"),
convergence = fitted_model$fitobj$convergence
)
}
}
}
}
}
View(results)
# Setup -------------------------------------------------------------------
discounts <- 8
nblocks <- 6
types <- 1:6
true_pars <- expand.grid(lambda = 1,
size = 0.333,
shape = 0.333,
r = 1,
q = 1,
b0 = 0.5,
tau = c(0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5, 1.7, 2))
runs <- 1:50
# Parameter Recovery
results <-
foreach(discount = discounts, .combine = "rbind", .packages = c("cognitivemodels", "data.table")) %:%
foreach (nblock = nblocks, .combine = "rbind"  ) %:%
foreach (type = types, .combine = "rbind"  ) %:%
foreach (row = 1:nrow(true_pars), .combine = "rbind") %:%
foreach(run = runs, .combine = "rbind") %dopar%
{
{
{
{
# make true_par a single row of the expand.grid()
true_par <- true_pars[row, ]
# replicate all rows of data_shep by the number of nblock
data <- data_shep[rep(1:nrow(data_shep), nblock),]
# GCM with fixed parameters
model <- gcm(data = data,
formula = ~ size + shape + color,
class = paste("cat", type, sep = "_"),
choicerule = "softmax",
fix = true_par,
discount = 0)
# Simulation of repeated measurements
predictions <- predict(model)
{
# Add the predicted binominal value ({0,1}) to the data
data$simulations <- rbinom(length(predictions) , 1, predictions)
# Estimate the parameters given the response (simulations) and the class (cat_)
fitted_model <- gcm(data = data,
formula = simulations ~ size + shape + color,
class = paste("cat", type, sep = "_"),
choicerule = "softmax",
discount = discount)
# Save the necessary components to the results
data.table(
run = run,
discount = discount,
nblock = nblock,
type = type,
row = row,
names = names(coef(fitted_model)),
par = coef(fitted_model),
true_par = model$get_par("all"),
convergence = fitted_model$fitobj$convergence
)
}
}
}
}
}
write.csv(results,"D:\\Bibliotheken\\Dokumente\\R\\PraktikumParameterRecovery\\Parameter Recovery\\Data\\CatTau.csv", row.names = FALSE)
# estimated tau ~ category
ggplot(data = results_wide,
mapping = aes(x = as.factor(type),
y = par_tau)) +
geom_violin() +
stat_summary(fun = "median", geom = "point")+
geom_line(aes(x = type, y = true_par_tau), color = "red")+
facet_wrap(~true_par_tau) +
xlab("Number of repetitive Blocks seen during learning phase") +
ylab("Estimated Tau") +
theme_minimal()
#results <- fread("D:\\Bibliotheken\\Dokumente\\R\\PraktikumParameterRecovery\\Parameter Recovery\\Data\\DiscountTauCat1.csv")
#results <- fread("D:\\Bibliotheken\\Dokumente\\R\\PraktikumParameterRecovery\\Parameter Recovery\\Data\\DiscountTauCat6.csv")
#results <- fread("D:\\Bibliotheken\\Dokumente\\R\\PraktikumParameterRecovery\\Parameter Recovery\\Data\\BlockTau.csv")
results <- fread("D:\\Bibliotheken\\Dokumente\\R\\PraktikumParameterRecovery\\Parameter Recovery\\Data\\CatTau.csv")
# deleting the convergence (if necessary)
results <- results[convergence != 1]
#results <- fread("D:\\Bibliotheken\\Dokumente\\R\\PraktikumParameterRecovery\\Parameter Recovery\\Data\\DiscountTauCat1.csv")
#results <- fread("D:\\Bibliotheken\\Dokumente\\R\\PraktikumParameterRecovery\\Parameter Recovery\\Data\\DiscountTauCat6.csv")
#results <- fread("D:\\Bibliotheken\\Dokumente\\R\\PraktikumParameterRecovery\\Parameter Recovery\\Data\\BlockTau.csv")
results <- fread("D:\\Bibliotheken\\Dokumente\\R\\PraktikumParameterRecovery\\Parameter Recovery\\Data\\CatTau.csv")
#spread data.table by par and true_par
results_wide <- dcast(results, run + discount + nblock + type + row + convergence ~ names, value.var = c("par", "true_par"))
# estimated tau ~ category
ggplot(data = results_wide,
mapping = aes(x = as.factor(type),
y = par_tau)) +
geom_violin() +
stat_summary(fun = "median", geom = "point")+
geom_line(aes(x = type, y = true_par_tau), color = "red")+
facet_wrap(~true_par_tau) +
xlab("Number of repetitive Blocks seen during learning phase") +
ylab("Estimated Tau") +
theme_minimal()
# estimated tau ~ category
ggplot(data = results_wide,
mapping = aes(x = as.factor(type),
y = par_tau)) +
geom_violin() +
stat_summary(fun = "median", geom = "point")+
geom_line(aes(x = type, y = true_par_tau), color = "red")+
facet_wrap(~true_par_tau) +
xlab("Category") +
ylab("Estimated Tau") +
theme_minimal()
# true_tau ~ estimated tau (depending on nblocks)
ggplot(data = results_wide,
mapping = aes(x = true_par_tau,
y = par_tau)) +
stat_summary(fun = "median", geom = "point")+
geom_line( aes(x = true_par_tau, y = true_par_tau), color = "red") +
facet_wrap(~type) +
ylim(0,10) +
xlab("True tau") +
ylab("Median of estimated tau") +
theme_apa()
