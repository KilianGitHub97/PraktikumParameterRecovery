geom_point() +
geom_smooth(method = lm) +
theme_classic()
l <- l + 1
}
allgr[[1]]
allgr[[2]]
#Grafische Darstellung der Schätzfehler
elements <- c("diff_b0", "diff_b1", "diff_color", "diff_lambda", "diff_q", "diff_r", "diff_shape", "diff_size")
allgr <- list()
l <- 1
for(i in elements){
allgr[[l]] <- ggplot(data = dist_newpar,
aes(x = get(i),
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
l <- l + 1
}
allgr[[2]]
allgr[[3]]
allgr[[3]]
#Grafische Darstellung der Schätzfehler
elements <- c("diff_b0", "diff_b1", "diff_color", "diff_lambda", "diff_q", "diff_r", "diff_shape", "diff_size")
allgr <- list()
l <- 1
for(i in elements){
allgr[[l]] <- ggplot(data = dist_newpar,
aes(x = get(i),
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
l <- l + 1
}
allgr[[3]]
allgr[[3]]
#Grafische Darstellung der Schätzfehler
elements <- c("diff_b0", "diff_b1", "diff_color", "diff_lambda", "diff_q", "diff_r", "diff_shape", "diff_size")
allgr <- list()
l <- 1
for(i in elements){
allgr[[l]] <- ggplot(data = dist_newpar,
aes(x = e(i),
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
l <- l + 1
}
allgr[[3]]
#Grafische Darstellung der Schätzfehler
elements <- c("diff_b0", "diff_b1", "diff_color", "diff_lambda", "diff_q", "diff_r", "diff_shape", "diff_size")
allgr <- list()
l <- 1
for(i in elements){
allgr[[l]] <- ggplot(data = dist_newpar,
aes(x = i,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
l <- l + 1
}
allgr[[3]]
#Grafische Darstellung der Schätzfehler
elements <- c(dist_newpar$diff_b0, dist_newpar$diff_b1, "diff_color", "diff_lambda", "diff_q", "diff_r", "diff_shape", "diff_size")
allgr <- list()
l <- 1
for(i in elements){
allgr[[l]] <- ggplot(data = dist_newpar,
aes(x = i,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
l <- l + 1
}
allgr[[1]]
#Grafische Darstellung der Schätzfehler
elements <- c(dist_newpar$diff_b0, dist_newpar$diff_b1, "diff_color", "diff_lambda", "diff_q", "diff_r", "diff_shape", "diff_size")
allgr <- list()
l <- 1
for(i in elements){
allgr[[l]] <- ggplot(data = dist_newpar,
aes(x = get(i),
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
l <- l + 1
i = i + 1
}
allgr[[1]]
#Grafische Darstellung der Schätzfehler
elements <- c("diff_b0", "diff_b1", "diff_color", "diff_lambda", "diff_q", "diff_r", "diff_shape", "diff_size")
allgr <- list()
l <- 1
for(i in elements){
allgr[[l]] <- ggplot(data = dist_newpar,
aes(x = get(i),
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
l <- l + 1
i = i + 1
}
gg1 <- ggplot(data = dist_newpar,
aes(x = diff_b0,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
gg1 <- ggplot(data = dist_newpar,
aes(x = diff_b0,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
gg2 <- ggplot(data = dist_newpar,
aes(x = diff_b1,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
gg3 <- ggplot(data = dist_newpar,
aes(x = diff_color,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
gg4 <- ggplot(data = dist_newpar,
aes(x = diff_lambda,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
gg5 <- ggplot(data = dist_newpar,
aes(x = diff_q,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
gg6 <- ggplot(data = dist_newpar,
aes(x = diff_r,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
gg7 <- ggplot(data = dist_shape,
aes(x = diff_b0,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
gg8 <- ggplot(data = dist_size,
aes(x = diff_b0,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
library(ggpubr)
install.packages("ggpubr")
library(ggpubr)
plot1 <- ggarrange(gg1, gg2, gg3, gg4, gg5, gg6, gg7, gg8)
gg1 <- ggplot(data = dist_newpar,
aes(x = diff_b0,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
gg2 <- ggplot(data = dist_newpar,
aes(x = diff_b1,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
gg3 <- ggplot(data = dist_newpar,
aes(x = diff_color,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
gg4 <- ggplot(data = dist_newpar,
aes(x = diff_lambda,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
gg5 <- ggplot(data = dist_newpar,
aes(x = diff_q,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
gg6 <- ggplot(data = dist_newpar,
aes(x = diff_r,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
gg7 <- ggplot(data = dist_shape,
aes(x = diff_b0,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
gg8 <- ggplot(data = dist_size,
aes(x = diff_b0,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
gg7 <- ggplot(data = dist_newpar,
aes(x = diff_shape,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
gg8 <- ggplot(data = dist_newpar,
aes(x = diff_size,
y = ID)) +
geom_point() +
geom_smooth(method = lm) +
theme_classic()
plot1 <- ggarrange(gg1, gg2, gg3, gg4, gg5, gg6, gg7, gg8)
plot1
#Datensatz, bei dem die Distanzen zwischen den gefixten Werten und den freien Werten als Betrag abgespeichert werden
dist_allcutpar <- allcutpar %>%
mutate(diff_b0 = abs(0.5 - allcutpar$b0)) %>%
mutate(diff_b1 = abs(0.5 - allcutpar$b1)) %>%
mutate(diff_color = abs(0.33334 - allcutpar$color)) %>%
mutate(diff_lambda = abs(1 - allcutpar$lambda)) %>%
mutate(diff_q = abs(1.5 - allcutpar$r)) %>%
mutate(diff_r = abs(1.5 - allcutpar$r)) %>%
mutate(diff_shape = abs(0.33333 - allcutpar$shape)) %>%
mutate(diff_size = abs(0.33333 - allcutpar$size))
dist_allcutpar %>%
group_by(ID, number_of_deleted_values) %>%
summarise(
b0 = diff_b0,
b1 = diff_b1,
color =diff_color,
lambda = diff_lambda,
q = diff_q,
r = diff_r,
shape = diff_shape,
size = diff_size
) %>%
print(n = 40)
View(dist_allcutpar)
#Evaluation der Recovery des b0 Parameters
ggplotly(
ggplot(data = allcutpar,
aes(y = number_of_deleted_values)) +
geom_line(aes(x = b0)) +
geom_line(aes(x = 0.5, color = "red"))+ #original Parameter
facet_wrap(~ID)+  #ID = Size of the data frame (Number of Blocks)
theme_classic()
)
parameterrecovery <- function(Kategorie, ruleofchoice, chooselambda, choosesize, chooseshape, choosecolor, chooser, chooseq){
fixpar <- list(lambda = chooselambda, size = choosesize, shape = chooseshape, color = choosecolor, r = chooser, q = chooseq)
allFrames <- list()
models = list()
preddata = list()
rbincol <- list()
data_shep_rbin <- list()
kldiv <- list()
for (i in 1:6) {
allFrames[[i]] <- data_shep[rep(1:8, i), ]
models[[i]] <- gcm(data = allFrames[[i]], formula = y ~ size + shape + color, class = ~ Kategorie, choicerule = ruleofchoice, fix = fixpar)
preddata[[i]] <- cbind(allFrames[[i]], predict(models[[i]]))
rbincol[[i]] <- data.frame(binval = rbinom(nrow(preddata[[i]]) , 1, predict(models[[i]])))
data_shep_rbin[[i]] <- cbind(data_shep, rbincol[[i]])
kldiv[[i]] <- kl.dist(data_shep_rbin[[i]]$Kategorie_1, data_shep_rbin[[i]]$binval)}
newpar <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %do% {
a <- summary(gcm(data = data_shep_rbin[[i]], formula = binval ~ size + shape + color, class = ~ Kategorie, choicerule = ruleofchoice))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)
}
newpar <- newpar %>% spread(key = .rownames, value = Estimate)
newpar$b0 <- unlist(newpar$b0)
newpar$b1 <- unlist(newpar$b1)
newpar$color <- unlist(newpar$color)
newpar$lambda <- unlist(newpar$lambda)
newpar$q <- unlist(newpar$q)
newpar$r <- unlist(newpar$r)
newpar$shape <- unlist(newpar$shape)
newpar$size <- unlist(newpar$size)
cutnewpar <- list()
l = 1
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %do% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie, choicerule = ruleofchoice))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)}
l <- l + 1}
names <- c("ID", "b0", "b1", "color", "lambda", "q", "r", "shape", "size")
for (i in 1:7) {
unlist(cutnewpar[[i]])
cutnewpar[[i]] <- cutnewpar[[i]] %>% spread(key = .rownames, value = Estimate)
cutnewpar[[i]] <- cutnewpar[[i]][,names]
cutnewpar[[i]] <- cutnewpar[[i]] %>% mutate(number_of_deleted_values = i)}
allcutpar <- as.data.frame(
rbind(cutnewpar[[1]],
cutnewpar[[2]],
cutnewpar[[3]],
cutnewpar[[4]],
cutnewpar[[5]],
cutnewpar[[6]],
cutnewpar[[7]]))
allcutpar$b0[lengths(allcutpar$b0) == 0] <- NA
allcutpar$b1[lengths(allcutpar$b1) == 0] <- NA
allcutpar$color[lengths(allcutpar$color) == 0] <- NA
allcutpar$lambda[lengths(allcutpar$lambda) == 0] <- NA
allcutpar$q[lengths(allcutpar$q) == 0] <- NA
allcutpar$r[lengths(allcutpar$r) == 0] <- NA
allcutpar$shape[lengths(allcutpar$shape) == 0] <- NA
allcutpar$size[lengths(allcutpar$size) == 0] <- NA
allcutpar$b0 <- unlist(allcutpar$b0)
allcutpar$b1 <- unlist(allcutpar$b1)
allcutpar$color <- unlist(allcutpar$color)
allcutpar$lambda <- unlist(allcutpar$lambda)
allcutpar$q <- unlist(allcutpar$q)
allcutpar$r <- unlist(allcutpar$r)
allcutpar$shape <- unlist(allcutpar$shape)
allcutpar$size <- unlist(allcutpar$size)
allcutpar <- allcutpar %>%
filter(b0 != is.na(NA)) %>%
filter(r != 1.5)
dist_allcutpar <- allcutpar %>%
mutate(diff_b0 = abs(0.5 - allcutpar$b0)) %>%
mutate(diff_b1 = abs(0.5 - allcutpar$b1)) %>%
mutate(diff_color = abs(choosecolor - allcutpar$color)) %>%
mutate(diff_lambda = abs(chooselambda - allcutpar$lambda)) %>%
mutate(diff_q = abs(chooseq - allcutpar$r)) %>%
mutate(diff_r = abs(chooser - allcutpar$r)) %>%
mutate(diff_shape = abs(chooseshape - allcutpar$shape)) %>%
mutate(diff_size = abs(choosesize - allcutpar$size))
print(dist_allcutpar %>%
group_by(ID, number_of_deleted_values) %>%
summarise(
b0 = diff_b0,
b1 = diff_b1,
color =diff_color,
lambda = diff_lambda,
q = diff_q,
r = diff_r,
shape = diff_shape,
size = diff_size
) %>%
print(n = 40))
dist_newpar <- newpar %>%
mutate(diff_b0 = abs(0.5 - newpar$b0)) %>%
mutate(diff_b1 = abs(0.5 - newpar$b1)) %>%
mutate(diff_color = abs(0.33334 - newpar$color)) %>%
mutate(diff_lambda = abs(1 - newpar$lambda)) %>%
mutate(diff_q = abs(1.5 - newpar$r)) %>%
mutate(diff_r = abs(1.5 - newpar$r)) %>%
mutate(diff_shape = abs(0.33333 - newpar$shape)) %>%
mutate(diff_size = abs(0.33333 - newpar$size))
print(dist_newpar %>%
group_by(ID)%>%
summarise(
b0 = diff_b0,
b1 = diff_b1,
color =diff_color,
lambda = diff_lambda,
q = diff_q,
r = diff_r,
shape = diff_shape,
size = diff_size
))
}
parameterrecovery(Kategorie = data_shep$Kategorie_1, ruleofchoice = "none", chooselambda = 1, choosesize = 0.34,
chooseshape = 0.33, choosecolor = 0.33, chooser = 1.5, chooseq = 1.5)
parameterrecovery(Kategorie = data_shep$Kategorie_1, ruleofchoice = "none", chooselambda = 1, choosesize = 0.34,
chooseshape = 0.33, choosecolor = 0.33, chooser = 1.5, chooseq = 1.5)
Kategorie = data_shep$Kategorie_1
ruleofchoice = "none"
chooselambda = 1
choosesize = 0.34
chooseshape = 0.33
choosecolor = 0.33
chooser = 1.5
chooseq = 1.5
fixpar <- list(lambda = chooselambda, size = choosesize, shape = chooseshape, color = choosecolor, r = chooser, q = chooseq)
allFrames <- list()
models = list()
preddata = list()
rbincol <- list()
data_shep_rbin <- list()
kldiv <- list()
for (i in 1:6) {
allFrames[[i]] <- data_shep[rep(1:8, i), ]
models[[i]] <- gcm(data = allFrames[[i]], formula = y ~ size + shape + color, class = ~ Kategorie, choicerule = ruleofchoice, fix = fixpar)
preddata[[i]] <- cbind(allFrames[[i]], predict(models[[i]]))
rbincol[[i]] <- data.frame(binval = rbinom(nrow(preddata[[i]]) , 1, predict(models[[i]])))
data_shep_rbin[[i]] <- cbind(data_shep, rbincol[[i]])
kldiv[[i]] <- kl.dist(data_shep_rbin[[i]]$Kategorie_1, data_shep_rbin[[i]]$binval)}
newpar <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %do% {
a <- summary(gcm(data = data_shep_rbin[[i]], formula = binval ~ size + shape + color, class = ~ Kategorie, choicerule = ruleofchoice))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)
}
newpar <- foreach(i = 1:6, .combine = "rbind") %do% {
a <- summary(gcm(data = data_shep_rbin[[i]], formula = binval ~ size + shape + color, class = ~ Kategorie, choicerule = ruleofchoice))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)
}
fixpar <- list(lambda = chooselambda, size = choosesize, shape = chooseshape, color = choosecolor, r = chooser, q = chooseq)
allFrames <- list()
models = list()
preddata = list()
rbincol <- list()
data_shep_rbin <- list()
kldiv <- list()
for (i in 1:6) {
allFrames[[i]] <- data_shep[rep(1:8, i), ]
models[[i]] <- gcm(data = allFrames[[i]], formula = y ~ size + shape + color, class = ~ Kategorie, choicerule = ruleofchoice, fix = fixpar)
preddata[[i]] <- cbind(allFrames[[i]], predict(models[[i]]))
rbincol[[i]] <- data.frame(binval = rbinom(nrow(preddata[[i]]) , 1, predict(models[[i]])))
data_shep_rbin[[i]] <- cbind(data_shep, rbincol[[i]])
kldiv[[i]] <- kl.dist(data_shep_rbin[[i]]$Kategorie_1, data_shep_rbin[[i]]$binval)}
# Schätzung der Parameter mit binval als Response Variable
newpar <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %do% {
a <- summary(gcm(data = data_shep_rbin[[i]], formula = binval ~ size + shape + color, class = ~ Kategorie_1, choicerule = "none"))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)
}
# Schätzung der Parameter mit binval als Response Variable
newpar <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %dopar% {
a <- summary(gcm(data = data_shep_rbin[[i]], formula = binval ~ size + shape + color, class = ~ Kategorie_1, choicerule = "none"))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)
}
newpar <- foreach(i = 1:6, .combine = "rbind") %dopar% {
a <- summary(gcm(data = data_shep_rbin[[i]], formula = binval ~ size + shape + color, class = ~ Kategorie, choicerule = ruleofchoice))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)
}
newpar <- newpar %>% spread(key = .rownames, value = Estimate)
newpar$b0 <- unlist(newpar$b0)
newpar$b1 <- unlist(newpar$b1)
newpar$color <- unlist(newpar$color)
newpar$lambda <- unlist(newpar$lambda)
newpar$q <- unlist(newpar$q)
newpar$r <- unlist(newpar$r)
newpar$shape <- unlist(newpar$shape)
newpar$size <- unlist(newpar$size)
cutnewpar <- list()
l = 1
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %do% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie, choicerule = ruleofchoice))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)}
l <- l + 1}
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %dopar% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie, choicerule = ruleofchoice))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)}
l <- l + 1}
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %do% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie, choicerule = ruleofchoice))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)}
l <- l + 1}
l = 1
cutnewpar <- list()
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %do% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie, choicerule = ruleofchoice))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)}
l <- l + 1}
cutnewpar <- list()
l = 1
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind", .packages = c("cognitivemodels", "broom", "dplyr")) %do% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie, choicerule = ruleofchoice))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)}
l <- l + 1
}
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind") %do% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie, choicerule = ruleofchoice))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)}
l <- l + 1
}
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind") %do% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie, choicerule = ruleofchoice))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)}
l <- l + 1
}
cutnewpar <- list()
l = 1
for (j in 1:7) {
cutnewpar[[l]] <- foreach(i = 1:6, .combine = "rbind") %do% {
a <- summary(gcm(data = tail(data_shep_rbin[[i]], -j), formula = binval ~ size + shape + color, class = ~ Kategorie, choicerule = ruleofchoice))
b <- tidy(a$coefficients)
b <- b %>% mutate(ID = i)}
l <- l + 1
}
