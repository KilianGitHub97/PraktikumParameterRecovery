print("Hello World")
print("Hello People")
install.packages("data.table")
# Libraries ---------------------------------------------------------------
library(data.table)
flights <- fread(input_url)
_
input_url <- "https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/flights14.csv"
flights <- fread(input_url)
head(flights)
# Converting data.frame to data.table -------------------------------------
df001 <- data.frame(
R1 = 1:6,
R2 = 7:12,
R3 = 13:18
)
df001
class(df001)
df002 <- setDF(df001)
class(df001)
class(df002)
df002 <- setDT(df001)
class(df002)
df002 <- setDT(df001)
class(df002)
library(tidyverse)
glimpse(flights)
df003 <- flights[origin == LGA & month == 6]
df003 <- flights[origin == "LGA" & month == 6]
head(df003)
df004 <- flights[1:5] #get the first five rows of flights
df004
df005 <- flights[order(air_time, -distance)]
head(df005)
df005 <- flights[,dest]
df005
df006 <- flights[, list(dest)] #get column dest as a data.table
df006
df006 <- flights[, list(dest, dep_delay)] #get column dest as a data.table (Ã¤quivalent to dplyr::transmute())
df006
glimpse(flights)
df007 <- flights[,list(destination = dest)]
df007
df009 <- flights[,list(dep_delay + arr_delay) != 0]
df009 <- flights[,sum((dep_delay + arr_delay) != 0)]
df009
df009 <- flights[,sum((dep_delay + arr_delay) == 0)]
df009
df009 <- flights[,sum(((dep_delay + arr_delay) != 0) - ((dep_delay + arr_delay) == 0)))] #compute how many times the flights had any delay
df009 <- flights[, sum(((dep_delay + arr_delay) != 0) - ((dep_delay + arr_delay) == 0))] #compute how many times the flights had any delay
df009
df009 <- flights[, sum((dep_delay + arr_delay) != 0)] #compute how many times the flights had any delay
df009
df010 <- flights[dest != "LAX" & hour == 17, Mean_delay = mean(sum(dep_delay + arr_delay))]
df010 <- flights[dest != "LAX" & hour == 17, list(Mean_delay = mean(sum(dep_delay + arr_delay)))]
df010
df010 <- flights[dest != "LAX" & hour == 17, list(Mean_delay = mean(arr_delay))]
df010
df011 <- flights[, length()]
df011 <- flights[, length(dest)]
df012 <- flights[, .N(dest)]
df012 <- flights[, .N]
df012
df011
df011 <- flights[dest == "LAX", length(dest)]
df011
df013 <- flights[,c("arr_delay", "dep_delay")]
df013.5 <- flights[, list(arr_delay, dep_delay)]
df013
df013.5
df014 <- flights[,..VarVector]
VarVector <- c("arr_delay", "dep_delay")
df014 <- flights[,..VarVector]
df014.5 <- flights[, VarVector, with = FALSE]
df014 <- flights[, ..VarVector]
df014.5
df014
df015.5 <- flight[, !c("arr_delay", "dep_delay")]
df015.5 <- flights[, !c("arr_delay", "dep_delay")]
df015 <- flights[, -c("arr_delay", "dep_delay")]
df015.5
df015
df015.5 <- flights[, -..VarVector]
df015.5
df015.75 <- flights[, -VarVector, with = FALSE]
df015.75
glimpse(flights)
df016 <- flights[, year:dep_delay]
df016
df017 <- flights[, .N, by = "hour"]
df017
df017 <- df017[order(hour)]
df017
histogram(df017)
hist(df017)
hist(x = df017$hour, y = df017$N)
df017 <- flights[, count = .N, by = "hour"]
df017 <- flights[, .N, by = "hour"]
df017 <- df017[order(hour)]
hist(x = df017$hour, y = df017$N)
hist(x = df017$hour)
hist(x = df017$N)
ggplot(data = df017 , mapping = aes(x = hour, y = N)) + geom_histogram() +theme_classic()
ggplot(data = df017 , mapping = aes(x = hour, y = N)) + geom_bar() +theme_classic()
ggplot(data = df017 , mapping = aes(x = hour, y = N)) + geom_line() +theme_classic()
ggplot(data = df017 , mapping = aes(x = hour, y = N)) + geom_line(color = "red") +theme_classic()
ggplot(data = df017 , mapping = aes(x = hour, y = N)) + geom_line(color = "red") +theme_minimal()
ggplot(data = df017 , mapping = aes(x = hour, y = N)) + geom_line(color = "red") +theme_minimal() + xlim(0, 24)
ggplot(data = df017 , mapping = aes(x = hour, y = N)) + geom_line(color = "red") +theme_minimal() + xlim(0, 20)
ggplot(data = df017 , mapping = aes(x = hour, y = N)) + geom_line(color = "red") +theme_minimal() + xlim(0, 24)
ggplot(data = df017 , mapping = aes(x = hour, y = N)) + geom_line(color = "red") +theme_minimal() + xlim(0, 24) + scale_x_continuous(0,24,1)
ggplot(data = df017 , mapping = aes(x = hour, y = N)) + geom_line(color = "red") +theme_minimal() + xlim(0, 24) + scale_x_continuous(0,24)
ggplot(data = df017 , mapping = aes(x = hour, y = N)) + geom_line(color = "red") +theme_minimal() + xlim(0, 24) + scale_x_continuous(1,24)
ggplot(data = df017 , mapping = aes(x = hour, y = N)) + geom_line(color = "red") +theme_minimal() + xlim(0, 24) + scale_x_continuous("hour",24)
ggplot(data = df017 , mapping = aes(x = hour, y = N)) + geom_line(color = "red") +theme_minimal() + xlim(0, 24) + scale_x_continuous("hour",24, 0, 1)
ggplot(data = df017 , mapping = aes(x = hour, y = N)) + geom_line(color = "red") +theme_minimal() + xlim(0, 24)
ggplot(data = df017 , mapping = aes(x = hour, y = N)) + geom_line(color = "red") +theme_minimal() + xlim(0, 24, 1)
ggplot(data = df017 , mapping = aes(x = hour, y = N)) + geom_line(color = "red") +theme_minimal() + xlim(0, 24)
ggplot(data = df017 , mapping = aes(x = hour, y = N)) + geom_line(color = "red") +theme_minimal()
df017 <- flights[, .N, by = "hour"]
df017 <- df017[order(hour)]
df017
df017 <- flights[, list(Total_Flights(.N)), by = "hour"] #number of rows sorted by counts
df017 <- flights[, list(Total_Flights = (.N)), by = "hour"] #number of rows sorted by counts
df017 <- df017[order(hour)]
df017
glimpse(flights)
df018 <- flights[origin == "JFK", list(Total_Flights = (.N)), by = "hour"]
df018
df018 <- df018[order(hour)]
df018
df017
df019 <- flights[list(day, Total_Flights = (.N)), by = "hour"]
df019 <- flights[list(Total_Flights = (.N)), by = c("hour", "day")]
df019 <- flights[list(Total_Flights = (.N)), by = list("hour", "day")]
df019 <- flights[,list(Total_Flights = (.N)), by = list("hour", "day")]
df019 <- flights[,list(day, Total_Flights = (.N)), by = hour]
df019
df019 <- flights[,list(Total_Flights = (.N)), by = list(hour, day)]
df019
ggplot(data = df017 , mapping = aes(x = hour, y = N)) + geom_line(color = "red") +theme_minimal() + facet_wrap(~day) #lineplot with the number of flights PER hour
ggplot(data = df017 , mapping = aes(x = hour, y = Total_Flights)) + geom_line(color = "red") +theme_minimal() + facet_wrap(~day) #lineplot with the number of flights PER hour
?facet
?facet_wrap
ggplot(data = df019 , mapping = aes(x = hour, y = Total_Flights)) + geom_line(color = "red") +theme_minimal() + facet_wrap(~day) #lineplot with the number of flights PER hour
df019 <- flights[,list(Total_Flights = (.N)), by = list(hour, day, month)]
df019 <- flights[,list(Total_Flights = (.N)), by = list(hour, day, month)]
ggplot(data = df019 , mapping = aes(x = hour, y = Total_Flights)) + geom_line(color = "red") +theme_minimal() + facet_wrap(~c("day", "month")) #lineplot with the number of flights PER hour
df019 <- flights[,list(Total_Flights = (.N)), by = list(hour, day, month)]
df019
?facet_wrap
ggplot(data = df019 , mapping = aes(x = hour, y = Total_Flights)) + geom_line(color = "red") +theme_minimal() + facet_wrap(~ day + month) #lineplot with the number of flights PER hour
for (i in 1:10) {
df019 <- flights[month == i,list(Total_Flights = (.N)), by = list(hour, day, month)] #number of flights by hour, day and month
ggplot(data = df019 , mapping = aes(x = hour, y = Total_Flights)) + geom_line(color = "red") +theme_minimal() + facet_wrap(~ day + month) #lineplot with the number of flights PER hour PER day PER month
}
for (i in 1:10) {
df019 <- flights[month == i,list(Total_Flights = (.N)), by = list(hour, day)] #number of flights by hour, day and month
ggplot(data = df019 , mapping = aes(x = hour, y = Total_Flights)) + geom_line(color = "red") +theme_minimal() + facet_wrap(~ day) #lineplot with the number of flights PER hour PER day PER month
}
df019 <- flights[month == 1,list(Total_Flights = (.N)), by = list(hour, day)]
df019
ggplot(data = df019 , mapping = aes(x = hour, y = Total_Flights)) + geom_line(color = "red") +theme_minimal() + facet_wrap(~day) #lineplot with the number of flights PER hour PER day PER month
for (i in 1:10) {
df019 <- flights[month == i,list(Total_Flights = (.N)), by = list(hour, day)] #number of flights by hour, day and month
ggplot(data = df019 , mapping = aes(x = hour, y = Total_Flights)) + geom_line(color = "red") +theme_minimal() + facet_wrap(~day) #lineplot with the number of flights PER hour PER day PER month
}
for (i in 1:10) {
df019 <- flights[month == i,list(Total_Flights = (.N)), by = list(hour, day)] #number of flights by hour, day and month
graph <- ggplot(data = df019 , mapping = aes(x = hour, y = Total_Flights)) + geom_line(color = "red") +theme_minimal() + facet_wrap(~day) #lineplot with the number of flights PER hour PER day PER month
print(graph)
}
df019 <- flights[month == 1,list(Total_Flights = (.N)), by = list(hour, day)]
ggplot(data = df019 , mapping = aes(x = hour, y = Total_Flights)) + geom_line(color = "red") +theme_minimal() + facet_wrap(~day) + ggtitle(i) #lineplot with the number of flights PER hour PER day PER month
for (i in 1:10) {
df019 <- flights[month == i,list(Total_Flights = (.N)), by = list(hour, day)] #number of flights by hour, day and month
graph <- ggplot(data = df019 , mapping = aes(x = hour, y = Total_Flights)) + ggtitle(i) + geom_line(color = "red") + facet_wrap(~day) +theme_minimal() #lineplot with the number of flights PER hour PER day PER month
print(graph)
}
library(foreach)
libraty(doParallel)
library(doParallel)
?foreach
foreach(i = 1:10) %dopar% {
df019 <- flights[month == i,list(Total_Flights = (.N)), by = list(hour, day)] #number of flights by hour, day and month
graph <- ggplot(data = df019 , mapping = aes(x = hour, y = Total_Flights)) + ggtitle(i) + geom_line(color = "red") + facet_wrap(~day) +theme_minimal() #lineplot with the number of flights PER hour PER day PER month
print(graph)
}
registerDoParallel(cores = 4)
foreach(i = 1:10, .packages = c("data.table", "tidyverse")) %dopar% {
df019 <- flights[month == i,list(Total_Flights = (.N)), by = list(hour, day)] #number of flights by hour, day and month
graph <- ggplot(data = df019 , mapping = aes(x = hour, y = Total_Flights)) + ggtitle(i) + geom_line(color = "red") + facet_wrap(~day) +theme_minimal() #lineplot with the number of flights PER hour PER day PER month
print(graph)
}
system.time(
foreach(i = 1:10, .packages = c("data.table", "tidyverse")) %dopar% {
df019 <- flights[month == i,list(Total_Flights = (.N)), by = list(hour, day)] #number of flights by hour, day and month
graph <- ggplot(data = df019 , mapping = aes(x = hour, y = Total_Flights)) + ggtitle(i) + geom_line(color = "red") + facet_wrap(~day) +theme_minimal() #lineplot with the number of flights PER hour PER day PER month
print(graph)
}
)
system.time(
for (i in 1:10) { #flights PER hour PER day PER month
df019 <- flights[month == i,list(Total_Flights = (.N)), by = list(hour, day)] #number of flights by hour, day and month
graph <- ggplot(data = df019 , mapping = aes(x = hour, y = Total_Flights)) + ggtitle(i) + geom_line(color = "red") + facet_wrap(~day) +theme_minimal() #lineplot with the number of flights PER hour PER day PER month
print(graph)
}
)
df020 <- flights[, list(Total_Flights = (.N)), keyby = "hour"]
df020
df018 <- flights[origin == "JFK", list(Total_Flights = (.N)), by = "hour"] #number of flights by hour that came from New York
df018 <- df018[order(-hour)]
fd018
df018
df018.5 <- flights[origin == "JFK", list(Total_Flights = (.N)), by = "hour"][order(-hour)]
df018.5
glimpse(flights)
df021 <- flights[, list(air_time, distance), by = "distance" > 1000]
df021 <- flights[, list(air_time, distance), by = list("distance" > 1000)]
df021 <- flights[, list(air_time, distance), by = list(distance > 1000)]
df021
df021 <- flights[, list(air_time, distance), by = list(distance > 1000)][order(distance)]
df021
# Converting data.frame to data.table -------------------------------------
df001 <- data.frame(
R1 = 1:6,
R2 = 7:12,
R3 = 13:18,
ID = c("a", "a", "b", "b", "b", "c")
)
class(df001) #data.frame
df002 <- setDT(df001) #convert data.frame to data.table: setDT()
class(df002)#data.table
df022 <- df002[, print(.SD), by = ID]
df022 <- df002[, list(print(.SD), print(.BY)), by = ID]
df022 <- df002[, {print(.SD), print(.BY)}, by = ID]
df022 <- df002[, {print(.SD); print(.BY)}, by = ID]
df022.5 <- flights[, {print(.SD); print(.BY)}, by = hour]
df022.5 <- flights[, {print(.SD); print(.BY)}, by = hour][order(hour)]
df023 <- flights[, lapply(.SD, mean), by = hour]
df023 <- flights[, list(-carrier, -origin, -dest, lapply(.SD, mean)), by = hour]
df023 <- flights[, list(-c("carrier", "origin", "dest"), lapply(.SD, mean)), by = hour]
df023 <- flights[, -c("carrier", "origin", "dest") & lapply(.SD, mean), by = hour]
df023 <- flights[, -c("carrier", "origin", "dest")][, lapply(.SD, mean), by = hour]
df023
df023 <- flights[, -c("carrier", "origin", "dest")][, lapply(.SD, mean), by = hour][order(hour)] #first delete all character columns, then compute the means of the remaining columns by hour
df023
operations <- c("min", "max", "mean", "sd")
for (i in operations) {
df023 <- flights[, -c("carrier", "origin", "dest")][, lapply(.SD, i), by = hour][order(hour)] #first delete all character columns, then compute the means of the remaining columns by hour
}
operations <- list("min", "max", "mean", "sd")
for (i in operations) {
df023 <- flights[, -c("carrier", "origin", "dest")][, lapply(.SD, i), by = hour][order(hour)] #first delete all character columns, then compute the means of the remaining columns by hour
}
print(df023)
for (i in operations) {
df023 <- flights[, -c("carrier", "origin", "dest")][, lapply(.SD, i), by = hour][order(hour)] #first delete all character columns, then compute the means of the remaining columns by hour
print(df023)
}
for (j in operations) {
df023 <- flights[, -c("carrier", "origin", "dest")][, lapply(.SD, j), by = hour][order(hour)] #first delete all character columns, then compute the means of the remaining columns by hour
print(df023)
}
operations <- list(min, max, mean, sd)
for (j in operations) {
df023 <- flights[, -c("carrier", "origin", "dest")][, lapply(.SD, j), by = hour][order(hour)] #first delete all character columns, then compute the means of the remaining columns by hour
print(df023)
}
for (j in operations) {
df023 <- flights[, -c("carrier", "origin", "dest")][, lapply(.SD, j), by = hour][,{print(.BY)}][order(hour)] #first delete all character columns, then compute the means of the remaining columns by hour
print(df023)
}
for (j in operations) {
df023 <- flights[, -c("carrier", "origin", "dest")][, {lapply(.SD, j); print(.BY)}, by = hour][,order(hour)] #first delete all character columns, then compute the means of the remaining columns by hour
print(df023)
}
for (j in operations) {
df023 <- flights[, -c("carrier", "origin", "dest")][, lapply(.SD, j), print(j), by = hour][,order(hour)] #first delete all character columns, then compute the means of the remaining columns by hour
print(df023)
}
df023 <- flights[, -c("carrier", "origin", "dest")][, {lapply(.SD, j); print(j)}, by = hour][,order(hour)] #first delete all character columns, then compute the means of the remaining columns by hour
for (j in operations) {
df023 <- flights[, -c("carrier", "origin", "dest")][, {lapply(.SD, j); print(j)}, by = hour][,order(hour)] #first delete all character columns, then compute the means of the remaining columns by hour
print(df023)
}
for (j in operations) {
df023 <- flights[, -c("carrier", "origin", "dest")][, lapply(.SD, j), by = hour][,order(hour)] #first delete all character columns, then compute the means of the remaining columns by hour
print(df023)
}
operations <- list(min, max, mean, sd)
for (j in operations) {
df023 <- flights[, -c("carrier", "origin", "dest")][, lapply(.SD, j), by = hour][,order(hour)] #first delete all character columns, then compute the means of the remaining columns by hour
print(df023)
}
operations <- list(min, max, mean, sd)
for (j in operations) {
df023 <- flights[, -c("carrier", "origin", "dest")][, lapply(.SD, j), by = hour][,order(hour)], #first delete all character columns, then compute the means of the remaining columns by hour
print(df023)
}
for (j in operations) {
df023 <- flights[, -c("carrier", "origin", "dest")][, lapply(.SD, j), by = hour][,order(hour)] #first delete all character columns, then compute the means of the remaining columns by hour
print(df023)
}
input_url <- "https://raw.githubusercontent.com/Rdatatable/data.table/master/vignettes/flights14.csv"
flights <- fread(input_url)
operations <- list(min, max, mean, sd)
for (j in operations) {
df023 <- flights[, -c("carrier", "origin", "dest")][, lapply(.SD, j), by = hour][,order(hour)] #first delete all character columns, then compute the means of the remaining columns by hour
print(df023)
}
operations <- list(min, max, mean, sd)
for (j in operations) {
df023 <- flights[, -c("carrier", "origin", "dest")][, lapply(.SD, j), by = hour][order(hour)] #first delete all character columns, then compute the means of the remaining columns by hour
print(df023)
}
df024 <- flights[, -c("carrier", "origin", "dest")][, lapply(.SD, j), by = hour, .SDcols = c("dep_delay", "arr_delay", "air_time", "distance") ][order(hour)]
df024
df024 <- flights[, -c("carrier", "origin", "dest")][, lapply(.SD, mean), by = hour, .SDcols = c("dep_delay", "arr_delay", "air_time", "distance")][order(hour)] #means only of the wanted columns
df024
foreach(i = 1:10, .packages = c("data.table", "tidyverse")) %dopar% { #flights PER hour PER day PER month
df019 <- flights[month == i,list(Total_Flights = (.N)), by = list(hour, day)] #number of flights by hour, day and month
graph <- ggplot(data = df019 , mapping = aes(x = hour, y = Total_Flights)) + ggtitle("Month" + i) + geom_line(color = "red") + facet_wrap(~day) +theme_minimal() #lineplot with the number of flights PER hour PER day PER month
print(graph)
}
foreach(i = 1:10, .packages = c("data.table", "tidyverse")) %dopar% { #flights PER hour PER day PER month
df019 <- flights[month == i,list(Total_Flights = (.N)), by = list(hour, day)] #number of flights by hour, day and month
graph <- ggplot(data = df019 , mapping = aes(x = hour, y = Total_Flights)) + ggtitle("Month", i) + geom_line(color = "red") + facet_wrap(~day) +theme_minimal() #lineplot with the number of flights PER hour PER day PER month
print(graph)
}
foreach(i = 1:10, .packages = c("data.table", "tidyverse")) %dopar% { #flights PER hour PER day PER month
df019 <- flights[month == i,list(Total_Flights = (.N)), by = list(hour, day)] #number of flights by hour, day and month
graph <- ggplot(data = df019 , mapping = aes(x = hour, y = Total_Flights)) + ggtitle("Month" i) + geom_line(color = "red") + facet_wrap(~day) +theme_minimal() #lineplot with the number of flights PER hour PER day PER month
print(graph)
}
foreach(i = 1:10, .packages = c("data.table", "tidyverse")) %dopar% { #flights PER hour PER day PER month
df019 <- flights[month == i,list(Total_Flights = (.N)), by = list(hour, day)] #number of flights by hour, day and month
graph <- ggplot(data = df019 , mapping = aes(x = hour, y = Total_Flights)) + ggtitle("Month",i) + geom_line(color = "red") + facet_wrap(~day) +theme_minimal() #lineplot with the number of flights PER hour PER day PER month
print(graph)
}
df024 <- flights[, -c("carrier", "origin", "dest")][, lapply(.SD, mean), keyby = hour, .SDcols = c("dep_delay", "arr_delay", "air_time", "distance")] #means only of the wanted columns
df024
input <- c("Kilian Sennrich", "Daniel Sennrich", "Pascal Sennrich", "Kilian", "Daniel", "Pascal")
str_length(input)
nchar(input)
str_sub(input, 3, -3)
str_sub(input, 3, 3) <- X
str_sub(input, 3, 3) <- "X"
input
input <- c("Kilian Sennrich", "Daniel Sennrich", "Pascal Sennrich", "Kilian", "Daniel", "Pascal")
str_dub(input, 1, 5)
str_dub(input, c(1, 5)
str_dub(input, c(1, 5)
)
str_dub(input, c(1, 5))
str_dup(input, c(1, 5))
str_dup(input, 3))
str_dup(input, 3)
input <- c("Kilian Sennrich", "Daniel Sennrich", "Pascal Sennrich", "Kilian", "Daniel", "Pascal")
str_pad(input, 10)
input <- c("Kilian Sennrich", "Daniel Sennrich", "Pascal Sennrich", "Kilian", "Daniel", "Pascal")
str_pad(input, 10)
str_pad(input, 10, "both")
input <- c("Kilian Sennrich", "Daniel Sennrich", "Pascal Sennrich", "Kilian", "Daniel", "Pascal")
str_pad(input, 10, "both")
str_trunc(input)
str_trunc(input, 10)
str_pad(input, 10, "both") #
str_pad(input, 10, "both", pad = " ") #
input2 <- str_pad(input, 20, "both")
str_trim(input2, 20, "both")
str_trim(input2, 20)
str_trim(input2)
str_wrap(input, width = 100)
str_to_upper(input)
str_to_lower(input)
str_to_title(input)
str_sort(input)
str_order(input)
pattern <- "([0][1-9][1-9][- .][1-9][1-9][1-9][- .][1-9][1-9][- .][1-9][1-9])"
str_detect(input3, pattern)
input3 <- c("dear",
"062 723 63 58",
"076-283-92-67",
"079.239.28.28"
)
pattern <- "([0][1-9][1-9][- .][1-9][1-9][1-9][- .][1-9][1-9][- .][1-9][1-9])"
str_detect(input3, pattern)
str_subset(input3, pattern)
input3 <- c("dear",
"y062 723 63 58",
"f076-283-92-67",
"q079.239.28.28"
)
pattern <- "([a-u][0][1-9][1-9][- .][1-9][1-9][1-9][- .][1-9][1-9][- .][1-9][1-9])"
str_detect(input3, pattern) #checks if the elements of input3 match the pattern
str_subset(input3, pattern) #returns all the elements that match the pattern
input3 <- c("dear",
"y062 723 63 58",
"076-283-92-67",
"q079.239.28.28"
)
pattern <- "([a-u][0][1-9][1-9][- .][1-9][1-9][1-9][- .][1-9][1-9][- .][1-9][1-9])"
str_detect(input3, pattern) #checks if the elements of input3 match the pattern
str_subset(input3, pattern) #returns all the elements that match the pattern
pattern <- "({a-u}[0][1-9][1-9][- .][1-9][1-9][1-9][- .][1-9][1-9][- .][1-9][1-9])"
str_detect(input3, pattern) #checks if the elements of input3 match the pattern
str_subset(input3, pattern) #returns all the elements that match the pattern
pattern <- "([{a-u}][0][1-9][1-9][- .][1-9][1-9][1-9][- .][1-9][1-9][- .][1-9][1-9])"
str_detect(input3, pattern) #checks if the elements of input3 match the pattern
pattern <- "([a-u][0][1-9][1-9][- .][1-9][1-9][1-9][- .][1-9][1-9][- .][1-9][1-9])"
str_detect(input3, pattern) #checks if the elements of input3 match the pattern
str_locate(input3, pattern)
pattern <- "([0][1-9][1-9][- .][1-9][1-9][1-9][- .][1-9][1-9][- .][1-9][1-9])"
str_detect(input3, pattern) #checks if the elements of input3 match the pattern
str_subset(input3, pattern) #returns all the elements that match the pattern
str_locate(input3, pattern) #locates the start and the end of the
str_locate_all(input3, pattern) #locates the start and the end of the item
str_locate(input3, pattern) #locates the start and the end of the item
str_extract(input3, pattern)
str_match(input3,pattern)
pattern <- "([0][1-9][1-9])[- .]([1-9][1-9][1-9])[- .]([1-9][1-9][- .][1-9][1-9])"
str_detect(input3, pattern) #checks if the elements of input3 match the pattern
str_subset(input3, pattern) #returns all the elements that match the pattern
str_locate(input3, pattern) #locates the start and the end of the item
str_extract(input3, pattern) #extracts exactly the pattern, that was searched
str_match(input3,pattern)
pattern <- "([0][1-9][1-9])[- .]([1-9][1-9][1-9])[- .]([1-9][1-9])[- .]([1-9][1-9])"
str_detect(input3, pattern) #checks if the elements of input3 match the pattern
str_subset(input3, pattern) #returns all the elements that match the pattern
str_locate(input3, pattern) #locates the start and the end of the item
str_extract(input3, pattern) #extracts exactly the pattern, that was searched
str_match(input3,pattern)
str_split(input3, pattern)
str_replace(input3, pattern, replacement = XX-XX)
str_replace(input3, pattern, replacement = "XX-XX")
