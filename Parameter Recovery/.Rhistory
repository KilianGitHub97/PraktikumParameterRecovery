b <- summary(gcm(data = allFrames[a], formula = Var3 ~ Var1 + Var2, class = ~Var4, choicerule = "none"))
c <- tidy(b$coefficients) %>% mutate(ID = a)
d <- data.frame(AIC = b$aic,
BIC = b$bic,
LOGLIK = b$logLik)
g <- cbind(c, d)
}
system.time(
data.1 <- foreach(a = 1:50, .combine = rbind, .packages = c("cognitivemodels", "tidyverse", "broom")) %do% {
b <- summary(gcm(data = allFrames[a], formula = Var3 ~ Var1 + Var2, class = ~Var4, choicerule = "none"))
c <- tidy(b$coefficients) %>% mutate(ID = a)
d <- data.frame(AIC = b$aic,
BIC = b$bic,
LOGLIK = b$logLik)
g <- cbind(c, d)
}
)
#putting all of the elements trough the gcm() Function
#Baue die Matrix ein
#
registerDoParallel(16)
data.1 <- foreach(a = 1:50, .combine = rbind, .packages = c("cognitivemodels", "tidyverse", "broom")) %dopar% {
b <- summary(gcm(data = allFrames[a], formula = Var3 ~ Var1 + Var2, class = ~Var4, choicerule = "none"))
c <- tidy(b$coefficients) %>% mutate(ID = a)
d <- data.frame(AIC = b$aic,
BIC = b$bic,
LOGLIK = b$logLik)
g <- cbind(c, d)
}
system.time(
data.1 <- foreach(a = 1:50, .combine = rbind, .packages = c("cognitivemodels", "tidyverse", "broom")) %dopar% {
b <- summary(gcm(data = allFrames[a], formula = Var3 ~ Var1 + Var2, class = ~Var4, choicerule = "none"))
c <- tidy(b$coefficients) %>% mutate(ID = a)
d <- data.frame(AIC = b$aic,
BIC = b$bic,
LOGLIK = b$logLik)
g <- cbind(c, d)
}
)
library(cognitivemodels)
library(tidyverse)
library(foreach)
library(doParallel)
library(data.table)
library(broom)
allFrames <- list()
fr <- expand.grid(0:1, 0:1, 0:1, 0:1)
l <- 1
for(i in 1:16) {
for (j in 1:16) {
for (k in 1:16) {
for (m in 1:16) {
xa <- fr[i,]
xb <- fr[j,]
xc <- fr[k,]
xd <- fr[m,]
allFrames[[l]] <- as.data.frame(rbind(xa, xb, xc, xd))
l <- l + 1
}
}
}
}
#putting all of the elements trough the gcm() Function
#Baue die Matrix ein
#
registerDoParallel(4)
data.1 <- foreach(a = 1:65536, .combine = rbind, .packages = c("cognitivemodels", "tidyverse", "broom")) %dopar% {
b <- summary(gcm(data = allFrames[a], formula = Var3 ~ Var1 + Var2, class = ~Var4, choicerule = "none"))
c <- tidy(b$coefficients) %>% mutate(ID = a)
d <- data.frame(AIC = b$aic,
BIC = b$bic,
LOGLIK = b$logLik)
g <- cbind(c, d)
}
write.csv(data.1,"D:\\Bibliotheken\\Dokumente\\R\\PraktikumParameterRecovery\\Parameter Recovery\\allFrames.csv", row.names = FALSE)
write.csv(data.1,"D:\\Bibliotheken\\Dokumente\\R\\PraktikumParameterRecovery\\Parameter Recovery\\allpos.csv", row.names = FALSE)
write.csv(data.1,"D:\\Bibliotheken\\Dokumente\\R\\PraktikumParameterRecovery\\Parameter Recovery\\allpos.csv", row.names = FALSE)
class(data.1)
write.csv(data.1,"D:\\Bibliotheken\\Dokumente\\R\\PraktikumParameterRecovery\\Parameter Recovery\\allpos.csv", row.names = FALSE)
data.12 <- setDF(data.1)
write.csv(data.12,"D:\\Bibliotheken\\Dokumente\\R\\PraktikumParameterRecovery\\Parameter Recovery\\allpos.csv", row.names = FALSE)
write.csv(data.12,"D:\\Bibliotheken\\Dokumente\\R\\allpos.csv", row.names = FALSE)
write.csv(data.1, "data.1.csv")
class(data.1$Estimate)
View(data.1)
glimpse(data.1)
data.1$Estimate <- as.character(data.1$Estimate)
glimpse(data.1)
data.1$Estimate <- as.numeric(data.1$Estimate)
glimpse(data.1)
write.csv(data.12,"D:\\Bibliotheken\\Dokumente\\R\\allpos.csv", row.names = FALSE)
write.csv(data.1,"D:\\Bibliotheken\\Dokumente\\R\\allpos.csv", row.names = FALSE)
write.csv(data.1,"D:\\Bibliotheken\\Dokumente\\R\\allpos.csv", row.names = FALSE)
glimpse(data.1)
library(data.table)
?fread
## Datensatz neu laden
dat1 <- fread(input = "D:\\Bibliotheken\\Dokumente\\R\\PraktikumParameterRecovery\\Parameter Recovery\\allpos.csv")
head(dat1, 15)
?gather
## Datensatz neu laden
dat1_raw <- fread(input = "D:\\Bibliotheken\\Dokumente\\R\\PraktikumParameterRecovery\\Parameter Recovery\\allpos.csv")
dat1 <- dat1_raw %>% gather(key = ID, value = .rownames, -AIC, -BIC, -LOGLIK)
View(dat1)
dat1 <- dat1_raw %>% gather(key = .rownames, value = ID, -AIC, -BIC, -LOGLIK)
View(dat1)
dat1 <- dat1_raw %>% spread(key = ID, value = .rownames, -AIC, -BIC, -LOGLIK)
## Datensatz neu laden
dat1_raw <- fread(input = "D:\\Bibliotheken\\Dokumente\\R\\PraktikumParameterRecovery\\Parameter Recovery\\allpos.csv")
dat1 <- dat1_raw %>% spread(key = ID, value = .rownames, -AIC, -BIC, -LOGLIK)
dat1 <- dat1_raw %>% spread(key = ID, value = .rownames)
View(dat1)
dat2 <- dat1_raw %>% spread(key = ID, value = .rownames)
dat2
dat2 <- dat1_raw %>% spread(key = ID, value = .rownames, -AIC, -BIC, -LOGLIK)
dat2 <- dat1_raw %>% spread(key = ID, value = .rownames, -AIC, -BIC)
dat2 <- dat1_raw %>% spread(key = ID, value = .rownames, -AIC, -BIC, na.rm = FALSE)
dat2 <- dat1_raw %>% spread(key = ID, value = .rownames, na.rm = FALSE)
View(data.1)
dat2 <- dat1_raw %>% spread(key = .rownames, value = ID, na.rm = FALSE)
dat2 <- dat1_raw %>% spread(key = .rownames, value = ID)
dat2 <- dat1_raw %>% spread(key = .rownames, value = Estimate, -BIC, -AIC)
dat2 <- dat1_raw %>% spread(key = .rownames, value = Estimate)
View(dat2)
#long in wide transformieren
dat1 <- dat1_raw %>% spread(key = .rownames, value = Estimate)
View(dat1)
# Schönheitsoperation
colvec <- c("ID","lambda", "q", "r", "Var1", "Var2", "(b0)", "(b1)", "b0", "b1", "AIC", "BIC", "LOGLIK")
dat2 <- colnames(colvec)
dat2 <- colnames(colvec)
dat2 <- dat1
# Schönheitsoperation
colvec <- c("ID","lambda", "q", "r", "Var1", "Var2", "(b0)", "(b1)", "b0", "b1", "AIC", "BIC", "LOGLIK")
dat2 <- colnames(colvec)
dat2 <- dat1
# Schönheitsoperation
colvec <- c("ID","lambda", "q", "r", "Var1", "Var2", "(b0)", "(b1)", "b0", "b1", "AIC", "BIC", "LOGLIK")
dat2[,colvec]
dat2[, ..colvec]
dat1 <- dat1[, ..colvec]
dat2 <- dat1
View(dat1)
table(count(dat1))
dat1 %>%
summarise(
MIN_AIC = min(AIC),
MAX_AIC = max(AIC),
MIN_BIC = min(BIC),
MAX_BIC = max(BIC)
)
ggplot( data = dat1,
mapping = aes(Y = AIC)) +
geom_line() +
theme_minimal()
ggplot( data = dat1,
mapping = aes(X = ID, Y = AIC)) +
geom_line() +
theme_minimal()
ggplot( data = dat1,
mapping = aes(x = ID, y = AIC)) +
geom_line() +
theme_minimal()
## Den Datensatz verstehen
dat1 %>%
summarise(
MIN_AIC = min(AIC) + ID,
MAX_AIC = max(AIC),
MIN_BIC = min(BIC),
MAX_BIC = max(BIC)
)
#Verhalten des BIC
ggplot( data = dat1,
mapping = aes(x = ID, y = BIC)) +
geom_line() +
theme_minimal()
ggplot( data = dat1,
mapping = aes(x = ID)) +
geom_line(aes(y = BIC, color = "red")) +
geom_line(aes(y = AIC, color = "blue")) +
theme_minimal()
ggplot( data = dat1,
mapping = aes(x = ID, y = LOGLIK)) +
geom_line() +
theme_minimal()
ggplot( data = dat1,
mapping = aes(x = ID)) +
geom_line(aes(y = BIC, color = "red")) +
geom_line(aes(y = AIC, color = "blue")) +
geom_line(aes(y = LOGLIK, color = "black")) +
theme_minimal()
ggplot( data = dat1,
mapping = aes(x = ID)) +
geom_line(aes(y = BIC, color = "red")) +
geom_line(aes(y = AIC, color = "blue")) +
geom_line(aes(y = LOGLIK, color = "green")) +
theme_minimal()
# Korrelation der drei Parameter
ggplot( data = dat1,
mapping = aes(x = ID)) +
geom_line(aes(y = BIC)) +
geom_line(aes(y = AIC)) +
geom_line(aes(y = LOGLIK)) +
theme_minimal()
# Korrelation der drei Parameter
ggplot( data = dat1,
mapping = aes(x = ID)) +
geom_line(aes(y = BIC, color = "red")) +
geom_line(aes(y = AIC, color = "blue")) +
geom_line(aes(y = LOGLIK, color = "green")) +
theme_minimal()
## Den Datensatz verstehen
#min und max von AIC, BIC und LOGLIK
dat1 %>%
summarise(
MIN_AIC = min(AIC),
MAX_AIC = max(AIC),
MIN_BIC = min(BIC),
MAX_BIC = max(BIC),
MIN_LOGLIK = min(LOGLIK),
MAX_LOGLIK = max(LOGLIK)
)
dat1.dt <- setDT(dat1)
dat1.dt[AIC == 16]
dat1.dt[,AIC == 16]
dat1 %>%
filter(AIC == 16) %>%
print(ID)
## Den Datensatz verstehen
#min und max von AIC, BIC und LOGLIK
dat1 %>%
summarise(
MIN_AIC = min(AIC),
MAX_AIC = max(AIC),
MIN_BIC = min(BIC),
MAX_BIC = max(BIC),
MIN_LOGLIK = min(LOGLIK),
MAX_LOGLIK = max(LOGLIK)
)
View(dat1)
dat1 %>%
filter(AIC == 160.1746) %>%
print(ID)
dat1 %>%
filter(AIC == 160.1746)
filter(dat1, AIC == 16)
filter(dat1, BIC == 5.545177)
## Den Datensatz verstehen
#min und max von AIC, BIC und LOGLIK
dat1 %>%
group_by(ID) %>%
summarise(
MIN_AIC = min(AIC),
MAX_AIC = max(AIC),
MIN_BIC = min(BIC),
MAX_BIC = max(BIC),
MIN_LOGLIK = min(LOGLIK),
MAX_LOGLIK = max(LOGLIK)
)
## Den Datensatz verstehen
#min und max von AIC, BIC und LOGLIK
dat1 %>%
summarise(
MIN_AIC = c(min(AIC), ID),
MAX_AIC = max(AIC),
MIN_BIC = min(BIC),
MAX_BIC = max(BIC),
MIN_LOGLIK = min(LOGLIK),
MAX_LOGLIK = max(LOGLIK)
)
## Den Datensatz verstehen
#min und max von AIC, BIC und LOGLIK
dat1 %>%
summarise(
MIN_AIC = nth(min(AIC)),
MAX_AIC = max(AIC),
MIN_BIC = min(BIC),
MAX_BIC = max(BIC),
MIN_LOGLIK = min(LOGLIK),
MAX_LOGLIK = max(LOGLIK)
)
## Den Datensatz verstehen
#min und max von AIC, BIC und LOGLIK
dat1 %>%
summarise(
MIN_AIC = 1th(min(AIC)),
MAX_AIC = max(AIC),
MIN_BIC = min(BIC),
MAX_BIC = max(BIC),
MIN_LOGLIK = min(LOGLIK),
MAX_LOGLIK = max(LOGLIK)
)
## Den Datensatz verstehen
#min und max von AIC, BIC und LOGLIK
dat1 %>%
summarise(
MIN_AIC = c(nth(), min(AIC)),
MAX_AIC = max(AIC),
MIN_BIC = min(BIC),
MAX_BIC = max(BIC),
MIN_LOGLIK = min(LOGLIK),
MAX_LOGLIK = max(LOGLIK)
)
## Den Datensatz verstehen
#min und max von AIC, BIC und LOGLIK
dat1 %>%
summarise(
MIN_AIC = c(nth(MIN_AIC), min(AIC)),
MAX_AIC = max(AIC),
MIN_BIC = min(BIC),
MAX_BIC = max(BIC),
MIN_LOGLIK = min(LOGLIK),
MAX_LOGLIK = max(LOGLIK)
)
## Den Datensatz verstehen
#min und max von AIC, BIC und LOGLIK
dat1 %>%
summarise(
MIN_AIC = c(nth(MIN_AIC), min(AIC)),
MAX_AIC = max(AIC),
MIN_BIC = min(BIC),
MAX_BIC = max(BIC),
MIN_LOGLIK = min(LOGLIK),
MAX_LOGLIK = max(LOGLIK)
)
## Den Datensatz verstehen
#min und max von AIC, BIC und LOGLIK
dat1 %>%
summarise(
MIN_AIC = min(AIC),
ROWNR = nth(min(AIC)),
MAX_AIC = max(AIC),
MIN_BIC = min(BIC),
MAX_BIC = max(BIC),
MIN_LOGLIK = min(LOGLIK),
MAX_LOGLIK = max(LOGLIK)
)
## Den Datensatz verstehen
#min und max von AIC, BIC und LOGLIK
dat1 %>%
summarise(
MIN_AIC = min(AIC), ROWNR = which.min(AIC)
MAX_AIC = max(AIC),
MIN_BIC = min(BIC),
MAX_BIC = max(BIC),
MIN_LOGLIK = min(LOGLIK),
MAX_LOGLIK = max(LOGLIK)
)
## Den Datensatz verstehen
#min und max von AIC, BIC und LOGLIK
dat1 %>%
summarise(
MIN_AIC = min(AIC), ROWNR = which.min(AIC),
MAX_AIC = max(AIC),
MIN_BIC = min(BIC),
MAX_BIC = max(BIC),
MIN_LOGLIK = min(LOGLIK),
MAX_LOGLIK = max(LOGLIK)
)
dat1 %>%
summarise(
MIN_AIC = which.min(AIC),
MAX_AIC = which.max(AIC),
MIN_BIC = which.min(BIC),
MAX_BIC = which.max(BIC),
MIN_LOGLIK = which.min(LOGLIK),
MAX_LOGLIK = which.max(LOGLIK)
)
#Untersuche diese Datensätze
allFrames[51337]
allFrames[1093]
count(max(dat1$AIC))
allFrames[1094]
allFrames[1095]
allFrames[1096]
allFrames[1097]
#ID Nummern dieser Werte: Es fällt auf, dass Min und Max jeweils in den selben Datensätzen vorliegen
dat1 %>%
summarise(
MIN_AIC = which.min(AIC),
MAX_AIC = which.max(AIC),
MIN_BIC = which.min(BIC),
MAX_BIC = which.max(BIC),
MIN_LOGLIK = which.min(LOGLIK),
MAX_LOGLIK = which.max(LOGLIK)
)
#min und max
dat1 %>%
summarise(
MIN_LAMBDA = min(lambda),
MAX_LAMBDA = max(lambda),
MIN_R = min(r),
MAX_R = max(r),
MIN_Q = min(Q),
MAX_Q = max(Q),
MIN_VAR1 = min(Var1),
MAX_VAR1 = max(Var1),
MIN_VAR2 = min(Var2),
MAX_VAR2 = max(Var2)
)
#min und max
dat1 %>%
summarise(
MIN_LAMBDA = min(lambda),
MAX_LAMBDA = max(lambda),
MIN_R = min(r),
MAX_R = max(r),
MIN_Q = min(q),
MAX_Q = max(q),
MIN_VAR1 = min(Var1),
MAX_VAR1 = max(Var1),
MIN_VAR2 = min(Var2),
MAX_VAR2 = max(Var2)
)
#ID Nummern dieser Werte: Es fällt auf, dass Min und Max jeweils in den selben Datensätzen vorliegen
dat1 %>%
summarise(
MIN_LAMBDA = which.min(lambda),
MAX_LAMBDA = which.max(lambda),
MIN_R = which.min(r),
MAX_R = which.max(r),
MIN_Q = which.min(q),
MAX_Q = which.max(q),
MIN_VAR1 = which.min(Var1),
MAX_VAR1 = which.max(Var1),
MIN_VAR2 = which.min(Var2),
MAX_VAR2 = which.max(Var2)
)
#Die Datensätze
allFrames[2772]
allFrames[2388]
allFrames[2401]
allFrames[2358]
allFrames[2404]
#
ggplot( data = dat1,
mapping = aes(x = ID)) +
geom_line(aes(y = lambda, color = "black")) +
theme_minimal()
#min und max
dat1 %>%
summarise(
MIN_LAMBDA = min(lambda),
MAX_LAMBDA = max(lambda),
MIN_R = min(r),
MAX_R = max(r),
MIN_Q = min(q),
MAX_Q = max(q),
MIN_VAR1 = min(Var1),
MAX_VAR1 = max(Var1),
MIN_VAR2 = min(Var2),
MAX_VAR2 = max(Var2)
)
# Lambda ist meistens nahe 1 oder 10
ggplot( data = dat1,
mapping = aes(x = ID)) +
geom_line(aes(y = lambda, color = "red")) +
theme_minimal()
# r
ggplot( data = dat1,
mapping = aes(x = ID)) +
geom_line(aes(y = r, color = "red")) +
theme_minimal()
# q
ggplot( data = dat1,
mapping = aes(x = ID)) +
geom_line(aes(y = q, color = "red")) +
theme_minimal()
install.packages("LaplacesDeamon")
install.packages("FFN")
install.packages("Rtreemix")
install.packages("Rtreemix")
library(Rtreemix)
install.packages("qdap")
library(qdap)
install.packages("RcolorBrewer")
install.packages("RColorBrewer")
install.packages("RColorBrewer")
library(qdap)
kullback_leibler()
ggplot( data = dat1,
mapping = aes(x = ID)) +
geom_line(aes(y = Var1, color = "red")) +
theme_minimal()
library(cognitivemodels)
library(tidyverse)
library(foreach)
library(doParallel)
library(data.table)
library(broom)
ggplot( data = dat1,
mapping = aes(x = ID)) +
geom_line(aes(y = Var1, color = "red")) +
theme_minimal()
#Var2
ggplot( data = dat1,
mapping = aes(x = ID)) +
geom_line(aes(y = Var1, color = "red")) +
theme_minimal()
#Var1 und Var2
ggplot( data = dat1,
mapping = aes(x = ID)) +
geom_line(aes(y = Var1, color = "red")) +
geom_line(aes(y = Var2, color = "green")) +
theme_minimal()
# r und q
ggplot( data = dat1,
mapping = aes(x = ID)) +
geom_line(aes(y = r, color = "red")) +
geom_line(aes(y = q, color = "green")) +
theme_minimal()
install.packages(" philentropy")
